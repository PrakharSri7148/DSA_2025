Code 1:
import java.util.*;
public class ReverseStack {
    public static void reverse(Stack<Integer> s) {
        Stack<Integer> r = new Stack<>();
        while(!s.isEmpty()) {
            int val = s.pop();
            System.out.println(val);
            r.push(val);
        }

        System.out.println("UNO REVERSE");

        while(!r.isEmpty()) {
            int val = r.pop();
            System.out.println(val);
        }
    }
    public static void main(String[] args) {
        Stack<Integer> s = new Stack<>();
        
        s.push(1);
        s.push(2);
        s.push(3);

        reverse(s);
    }
}


Code 2:                ////////////////// memory efficient /////////////////////
import java.util.*;

public class ReverseStack2 {
    
    public static void pushAtBottom(Stack<Integer> s, int data) {
        while(s.isEmpty()) {
            s.push(data);
            return;
        }
        int pop = s.pop();
        pushAtBottom(s, data);
        s.push(pop); 
    }

    public static void reverse(Stack<Integer> s) {
        while(s.isEmpty()) {
            return;
        }
        int top = s.pop();
        reverse(s);
        pushAtBottom(s, top);
    }

    public static void printStack(Stack<Integer> s) {
        while(!s.isEmpty()) {
            System.out.println(s.pop());
        }
    }

    public static void main(String[] args) {
        Stack <Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);

        reverse(s);
        printStack(s);
    }
}
